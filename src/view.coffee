class window.ViewState
	constructor: (map) ->
		@items = []
		@mobs = []
		@room = null

		@squares = map.player.seenSqrs
		@x = map.player.x
		@y = map.player.y

		for [x, y] in @squares
			obj = map.get(x,y).object
			if obj != null
				if obj instanceof MonsterObj
					@mobs.push obj
				else if obj.type == 'item'
					@items.push obj

		for room in map.rooms
			if map.withinRoom(@x, @y)
				@room = room
				break

class window.ViewDescriber
	constructor: (map) ->
		@map = map
		@curstate = new ViewState(@map)
		@prestate = new ViewState(@map)
		@events = []

	describe: () ->
		# @curstate = new ViewState()

		# Messages in description
		m = []

		if @curstate.room != null
			m.push 'You are in a room.'
		else
			m.push 'You are in a corridor.'

		for item in @curstate.items
			m.push 'You see an item.'

		for mob in @curstate.mobs
			m.push 'You see a monster.'

		return m

	step: () ->
		@prestate = @curstate
		@curstate = new ViewState(@map)

		# Messages generated by stepping
		m = []

		m = m.concat @compare(@curstate.mobs, @prestate.mobs, 'a monster.')
		m = m.concat @compare(@curstate.items, @prestate.items, 'an item.')

		if @prestate.room != @curstate.room
			if @curstate.room instanceof MapRoom
				m.push 'You enter a room.'
			else
				m.push 'You enter a corridor.'


		return m

	compare: (cur, prev, msg) ->
		m = []
		for t in cur
			if t not in prev
				m.push 'You spot ' + msg
		for t in prev
			if t not in cur
				m.push 'You lose sight of ' + msg
		return m

	pushevent: (event) ->
		@events.push event