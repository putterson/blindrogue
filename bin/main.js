// Generated by CoffeeScript 1.6.3
(function() {
  var Game, Player;

  Game = {
    display: null,
    map: {},
    engine: null,
    player: null,
    init: function() {
      var scheduler;
      this.display = new ROT.Display();
      document.body.appendChild(this.display.getContainer());
      this._generateMap();
      scheduler = new ROT.Scheduler.Simple();
      scheduler.add(this.player, true);
      this.engine = new ROT.Engine(scheduler);
      return this.engine.start();
    },
    _generateMap: function() {
      var digCallback, digger, freeCells;
      digger = new ROT.Map.Digger();
      freeCells = [];
      digCallback = function(x, y, value) {
        var key;
        if (value) {
          return;
        }
        key = x + "," + y;
        this.map[key] = ".";
        return freeCells.push(key);
      };
      digger.create(digCallback.bind(this));
      this._generateBoxes(freeCells);
      this._drawWholeMap();
      return this._createPlayer(freeCells);
    },
    _createPlayer: function(freeCells) {
      var index, key, parts, x, y;
      index = Math.floor(ROT.RNG.getUniform() * freeCells.length);
      key = freeCells.splice(index, 1)[0];
      parts = key.split(",");
      x = parseInt(parts[0]);
      y = parseInt(parts[1]);
      return this.player = new Player(x, y);
    },
    _generateBoxes: function(freeCells) {
      var i, index, key, _results;
      i = 0;
      _results = [];
      while (i < 10) {
        index = Math.floor(ROT.RNG.getUniform() * freeCells.length);
        key = freeCells.splice(index, 1)[0];
        this.map[key] = "*";
        _results.push(i++);
      }
      return _results;
    },
    _drawWholeMap: function() {
      var key, parts, x, y, _results;
      _results = [];
      for (key in this.map) {
        parts = key.split(",");
        x = parseInt(parts[0]);
        y = parseInt(parts[1]);
        _results.push(this.display.draw(x, y, this.map[key]));
      }
      return _results;
    }
  };

  Player = function(x, y) {
    this._x = x;
    this._y = y;
    return this._draw();
  };

  Player.prototype.act = function() {
    Game.engine.lock();
    return window.addEventListener("keydown", this);
  };

  Player.prototype.handleEvent = function(e) {
    var code, dir, keyMap, newKey, newX, newY;
    keyMap = {};
    keyMap[38] = 0;
    keyMap[33] = 1;
    keyMap[39] = 2;
    keyMap[34] = 3;
    keyMap[40] = 4;
    keyMap[35] = 5;
    keyMap[37] = 6;
    keyMap[36] = 7;
    code = e.keyCode;
    if (!(code in keyMap)) {
      return;
    }
    dir = ROT.DIRS[8][keyMap[code]];
    newX = this._x + dir[0];
    newY = this._y + dir[1];
    newKey = newX + "," + newY;
    if (!(newKey in Game.map)) {
      return;
    }
    Game.display.draw(this._x, this._y, Game.map[this._x + "," + this._y]);
    this._x = newX;
    this._y = newY;
    this._draw();
    window.removeEventListener("keydown", this);
    return Game.engine.unlock();
  };

  Player.prototype._draw = function() {
    return Game.display.draw(this._x, this._y, "@", "#ff0");
  };

  Game.init();

}).call(this);
